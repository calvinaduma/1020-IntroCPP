#ifndef CUP_H
#define CUP_H

// CPSC 1020-004 Spring 2019 example
//
//
// UML
//
//   +---------------+
//   | Cup           |
//   +---------------+
//   | - max_volume_ |
//   | - volume_     |
//   +---------------+
//   | + Cup()       |
//   | + Capacity()  |
//   | + Contains()  |
//   | + Increase()  |
//   | + Decrease()  |
//   +---------------+
//
//
// class design of Cup
//
// this class represents various cup objects that have a maximum
//   size (max_volume_) and a current volume_ measured in ounces
//   (oz.)
//
// the default size is 3 oz., which is the size of a small paper
//   cup; 3 oz. is also the minimum size; there is no maximum size
//
// the default initial volume_ is 0
//
// the Decrease() and Increase() methods guard against underflow
//   and overflow of the volume_; they return the amount of the
//   requested decrease that was possible and the amount of the
//   requested increase that was possible, respectively
//
// the Decrease() and Increase() methods ignore negative values
//   passed as parameters and return 0
//
//
// implementation of Cup
//
// the 2-parameter constructor has two default parameters and can
//   be used as the default (0-parameter) constructor as well as
//   a 1-parameter and 2-parameter constructor
//
// other special methods are generated by the compiler
//
// invariants:
//   max_volume_ >= 3
//   0 <= volume_ <= max_volume_


class Cup {

public:

  Cup( double cup_size = 3.0, double initial_amount = 0.0 );

  double Capacity();
  double Contains();

  double Decrease( double requested_amount );
  double Increase( double requested_amount );

private:

  double max_volume_;
  double volume_;

};
#endif
